{"ast":null,"code":"import { merge } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/brand/brand.service\";\nimport * as i2 from \"@angular/common\";\nfunction BackendRequestsComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\")(1, \"p\", 4);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 4);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\", 4);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"p\", 4);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const brand_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(brand_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(brand_r1.totalProfiles);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(brand_r1.totalFans);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(brand_r1.totalEngagement);\n  }\n}\nexport class BackendRequestsComponent {\n  constructor(brandService) {\n    this.brandService = brandService;\n    this.brands = [];\n  }\n  getProfileData(id, d, profile_type) {\n    return this.brandService.getProfileData(id, d, profile_type).pipe(map(b => {\n      var tmp = JSON.parse(JSON.stringify(b));\n      const key1 = Object.keys(tmp.resp)[0];\n      const keys = Object.keys(tmp.resp[key1]);\n      var totalFans = 0;\n      var totalEngagement = 0;\n      for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i];\n        totalEngagement += Number(tmp.resp[key1][key].engagement);\n        console.log(key, tmp.resp[key1][key]);\n      }\n      const res = {\n        totalEngagement: totalEngagement,\n        totalFans: totalFans\n      };\n      return res;\n    }));\n  }\n  getBrands() {\n    this.brandService.getBrands().pipe(switchMap(brands => {\n      const res = brands.map(b => {\n        const stats = b.profiles.map(p => {\n          const d = {\n            start: new Date(p.profile_added).getTime(),\n            end: Infinity,\n            timezone: \"Europe/London\"\n          };\n          return this.getProfileData(p.id, d, p.profile_type).pipe(map(s => {\n            return {\n              totalEngagement: s.totalEngagement,\n              totalFans: s.totalFans\n            };\n          }));\n        });\n        const brand = {\n          name: b.brandname,\n          totalProfiles: b.profiles.length,\n          stats: merge(stats)\n        };\n        return brand;\n      });\n      return merge(res);\n    })).subscribe(data => {\n      console.log(data);\n    });\n    // .subscribe(brands => {\n    //   brands.forEach(b => {\n    //     var totalEngagement = 0;\n    //     var totalFans = 0;\n    //     b.profiles.forEach(async p => {\n    //       const d = {\n    //         start: new Date(p.profile_added).getTime(),\n    //         end: Infinity,\n    //         timezone: \"Europe/London\"\n    //       };\n    //       const stats = await firstValueFrom(this.getProfileData(p.id, d, p.profile_type));\n    //       totalEngagement += stats.totalEngagement;\n    //       totalFans += stats.totalFans;\n    //     });\n    //     const brand = {\n    //       name: b.brandname,\n    //       totalProfiles: b.profiles.length,\n    //       totalEngagement: totalEngagement,\n    //       totalFans: totalFans\n    //     };\n    //     this.brands.push(brand);\n    //   });\n    // }\n    // );\n  }\n\n  ngOnInit() {\n    this.getBrands();\n  }\n}\nBackendRequestsComponent.ɵfac = function BackendRequestsComponent_Factory(t) {\n  return new (t || BackendRequestsComponent)(i0.ɵɵdirectiveInject(i1.BrandService));\n};\nBackendRequestsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BackendRequestsComponent,\n  selectors: [[\"app-backend-requests\"]],\n  decls: 5,\n  vars: 1,\n  consts: [[\"action\", \"/backendCompare\", \"method\", \"get\"], [\"type\", \"submit\"], [1, \"brands\"], [4, \"ngFor\", \"ngForOf\"], [1, \"name\"]],\n  template: function BackendRequestsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"button\", 1);\n      i0.ɵɵtext(2, \"Submit\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(3, \"ul\", 2);\n      i0.ɵɵtemplate(4, BackendRequestsComponent_li_4_Template, 9, 4, \"li\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngForOf\", ctx.brands);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["merge","map","switchMap","i0","BackendRequestsComponent","constructor","brandService","getProfileData","id","d","profile_type","pipe","b","tmp","JSON","parse","stringify","key1","Object","keys","resp","totalFans","totalEngagement","i","length","key","Number","engagement","console","log","res","getBrands","brands","stats","profiles","p","start","Date","profile_added","getTime","end","Infinity","timezone","s","brand","name","brandname","totalProfiles","subscribe","data","ngOnInit","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/home/keyglock/SocialInsiderProject/socialInsider/src/app/backend-requests/backend-requests.component.ts","/home/keyglock/SocialInsiderProject/socialInsider/src/app/backend-requests/backend-requests.component.html"],"sourcesContent":["import { Component, NgIterable, OnInit } from '@angular/core';\nimport { Brand, BrandFinal, BrandsResult, DateSocial } from '../brand';\nimport { BrandService } from '../services/brand/brand.service';\nimport { Observable, firstValueFrom, merge } from 'rxjs';\nimport { concatMap, map, switchMap, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-backend-requests',\n  templateUrl: './backend-requests.component.html',\n  styleUrls: ['./backend-requests.component.css']\n})\nexport class BackendRequestsComponent implements OnInit {\n\n  brands: BrandFinal[] = [];\n\n  constructor(private brandService: BrandService) { }\n\n  getProfileData(id: string,\n    d: DateSocial,\n    profile_type: string) {\n\n    return this.brandService.getProfileData(id,\n      d,\n      profile_type)\n      .pipe(\n        map(b => {\n          var tmp = JSON.parse(JSON.stringify(b));\n          const key1 = Object.keys(tmp.resp)[0];\n          const keys = Object.keys(tmp.resp[key1]);\n\n          var totalFans = 0;\n          var totalEngagement = 0;\n\n          for (let i = 0; i < keys.length; ++i) {\n            const key = keys[i];\n            totalEngagement += Number(tmp.resp[key1][key].engagement);\n            console.log(key, tmp.resp[key1][key]);\n          }\n\n          const res = {\n            totalEngagement: totalEngagement,\n            totalFans: totalFans\n          }\n\n          return res;\n        })\n      );\n\n  }\n\n   getBrands() {\n    this.brandService.getBrands()\n      .pipe(\n        switchMap(brands => {\n          const res = brands.map(b => {\n            const stats = b.profiles.map(p => {\n              const d = {\n                start: new Date(p.profile_added).getTime(),\n                end: Infinity,\n                timezone: \"Europe/London\"\n              };\n              return this.getProfileData(p.id, d, p.profile_type)\n              .pipe(\n                map(s => {\n                  return {\n                    totalEngagement: s.totalEngagement,\n                    totalFans: s.totalFans\n                  }\n                })\n              );\n  \n            })\n\n            const brand = {\n                    name: b.brandname,\n                    totalProfiles: b.profiles.length,\n                    stats: merge(stats)\n                  };\n              return brand;\n          })\n\n          return merge(res);\n        })\n      )\n      .subscribe(data =>{\n        console.log(data);\n      })\n      // .subscribe(brands => {\n\n      //   brands.forEach(b => {\n\n      //     var totalEngagement = 0;\n      //     var totalFans = 0;\n\n      //     b.profiles.forEach(async p => {\n      //       const d = {\n      //         start: new Date(p.profile_added).getTime(),\n      //         end: Infinity,\n      //         timezone: \"Europe/London\"\n      //       };\n      //       const stats = await firstValueFrom(this.getProfileData(p.id, d, p.profile_type));\n\n      //       totalEngagement += stats.totalEngagement;\n      //       totalFans += stats.totalFans;\n      //     });\n\n      //     const brand = {\n      //       name: b.brandname,\n      //       totalProfiles: b.profiles.length,\n      //       totalEngagement: totalEngagement,\n      //       totalFans: totalFans\n      //     };\n\n      //     this.brands.push(brand);\n\n      //   });\n\n      // }\n\n      // );\n  }\n\n  ngOnInit(): void {\n    this.getBrands();\n  }\n}\n","<form action=\"/backendCompare\" method=\"get\">\n  <button type=\"submit\">Submit</button>\n</form> \n\n\n<ul class=\"brands\">\n  <li *ngFor=\"let brand of brands\">\n    <p class=\"name\">{{ brand.name }}</p>\n    <p class=\"name\">{{ brand.totalProfiles }}</p>\n    <p class=\"name\">{{ brand.totalFans }}</p>\n    <p class=\"name\">{{ brand.totalEngagement }}</p>\n\n  </li>\n</ul>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}