{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BrandService {\n  constructor(http) {\n    this.http = http;\n    this.backendUrl = 'http://localhost:4200/backendCompare';\n  }\n  getBrands() {\n    var result = this.http.get(this.backendUrl);\n    var res = this.http.get(this.backendUrl);\n    var f = res.subscribe(val => JSON.parse(val)['result']);\n    console.log(f);\n    return result.pipe();\n  }\n}\nBrandService.ɵfac = function BrandService_Factory(t) {\n  return new (t || BrandService)(i0.ɵɵinject(i1.HttpClient));\n};\nBrandService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BrandService,\n  factory: BrandService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,YAAY;EAKvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAHxB,eAAU,GAAW,sCAAsC;EAGnB;EAExCC,SAAS;IACP,IAAIC,MAAM,GAAG,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,IAAI,CAACC,UAAU,CAAC;IACpD,IAAIC,GAAG,GAAG,IAAI,CAACL,IAAI,CAACG,GAAG,CAAS,IAAI,CAACC,UAAU,CAAC;IAEhD,IAAIE,CAAC,GAAGD,GAAG,CAACE,SAAS,CAACC,GAAG,IAAIC,IAAI,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;IACvDG,OAAO,CAACC,GAAG,CAACN,CAAC,CAAC;IAEd,OAAOJ,MAAM,CAACW,IAAI,EAAE;EACtB;;AAfWf,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAgB,SAAZhB,YAAY;EAAAiB,YAFX;AAAM","names":["BrandService","constructor","http","getBrands","result","get","backendUrl","res","f","subscribe","val","JSON","parse","console","log","pipe","factory","providedIn"],"sourceRoot":"","sources":["/home/keyglock/SocialInsiderProject/socialInsider/src/app/services/brand/brand.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Brand } from 'src/app/brand';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrandService {\n\n  backendUrl: string = 'http://localhost:4200/backendCompare';\n  test!: string;\n\n  constructor(private http: HttpClient) { }\n\n  getBrands() {\n    var result = this.http.get<Brand[]>(this.backendUrl);\n    var res = this.http.get<string>(this.backendUrl);\n\n    var f = res.subscribe(val => JSON.parse(val)['result']);\n    console.log(f);\n\n    return result.pipe();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}